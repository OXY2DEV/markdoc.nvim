*markdoc.nvim*       Tree-sitter based `Markdown -> Vimdoc` converter for Neovim

                                    Image {1}                                   

--------------------------------------------------------------------------------
ðŸª„ Features                                              *markdoc.nvim-features*

- Basic `markdown` syntax support.
- `Inline HTML` support.
- Aligned paragraph(via `<p align=""></p>` or `<div align=""></div>`)
- Preserves whitespace.
- Extended syntax support(e.g. Callouts).
- Custom Table of contents generator.
- Custom file header support(with support for `version`, `author`,
  `date modified`).
- Fully customizable.
- Ability to configure per file(using `JSON`).

--------------------------------------------------------------------------------
ðŸ§­ Requirements

- `tree-sitter-markdown`.
- `tree-sitter-markdown_inline`.
- `tree-sitter-html`(for inline `HTML`).

â–‹ î­‚ Important
â–‹ By default, `callouts` use `nerd font` characters. You can change this in the
â–‹ config to use normal text instead.

--------------------------------------------------------------------------------
ðŸ“¦ Installation

VIM-PLUG

>vim
	Plug "OXY2DEV/markdoc.nvim"
<


LAZY.NVIM

>lua
	{
	    "OXY2DEV/markdoc.nvim"
	},
<


>lua
	return {
	    "OXY2DEV/markdoc.nvim"
	};
<


MINI.DEPS

>lua
	local MiniDeps = require("mini.deps");
	
	MiniDeps.add({
	    source = "OXY2DEV/markdoc.nvim",
	})
<


ROCKS.NVIM

â–‹ î©¬ Warning
â–‹ `luarocks package` may sometimes be a bit behind `main`.

>vim
	:Rocks install markdoc.nvim
<


GITHUB RELEASE

Tagged releases can be found in the release page {1}.

â–‹ ó°‹½ Note
â–‹ `Github releases` may sometimes be slightly behind `main`.

--------------------------------------------------------------------------------
ðŸŽ‡ Usage

There is a single command,

>vim
	:Doc
<


When called without arguments, it runs on the current buffer.

When called with an argument,

>vim
	:Doc README.md
<


It converts given file(s). It can be called with multiple files.

>vim
	:Doc README.md test.md
<


--------------------------------------------------------------------------------
ðŸ”§ Configuration

The plugin can be set-up by using the `setup()` function.

>lua
	require("markdoc").setup({
	    markdown = {
	        code_blocks = {
	            fallback_language = "vim",
	            indentation = "\t"
	        },
	    }
	});
<


The following options are supported,

GENERIC                                                   *markdoc.nvim-generic*

Type: `markdoc.config.generic`

Generic configuration options. These are,

filename                                                 *markdoc.nvim-filename* ~
                                                 *markdoc.nvim-generic.filename* ~

Type: `string`

Name of the file to save to.

â–‹ ó°‹½ Note
â–‹ This is relative to the current working directory!

force_write                                             *markdoc.nvim-force_write* ~
                                                *markdoc.nvim-generic.force_write* ~

Type: `boolean`

When `true`, use `:write!` instead of `:write`.

winopts                                                   *markdoc.nvim-winopts* ~
                                                  *markdoc.nvim-generic.winopts* ~

Type: `vim.api.keyset.win_config`

Options passed to `nvim_open_win()` for showing file preview.

textwidth                                               *markdoc.nvim-textwidth* ~
                                                *markdoc.nvim-generic.textwidth* ~

Type: `integer`

Same as 'textwidth'(`:h 'textwidth'`). Used for text wrapping & setting the
modeline.

Used by options that use ratios.

â–‹ ó°‹½ Note
â–‹ This will fallback to 80 by default.

indent                                                     *markdoc.nvim-indent* ~
                                                   *markdoc.nvim-generic.indent* ~

Type: `integer`

Unused.

header                                                     *markdoc.nvim-header* ~
                                                   *markdoc.nvim-generic.header* ~

Type: `markdoc.config.generic.header`

Configuration for `file header`.

>lua
	---@class markdoc.config.generic.header
	---
	---@field enabled? boolean
	---
	---@field tag? string Name of `help tag` for this file..
	---@field desc? string Short description to show at top.
	---
	---@field author? string[] Author(s) of the help file.
	---@field version? string Version string.
	---@field last_modified? boolean Should the last modification date be shown?
<


links                                                       *markdoc.nvim-links* ~
                                                    *markdoc.nvim-generic.links* ~

Type: `markdoc.config.generic.links`

Configuration for `link reference` section.

>lua
	---@class markdoc.config.generic.links
	---
	---@field enabled? boolean
	---@field desc? string Short description to show at top of link section.
	---
	---@field list_marker? string
	---@field url_format? string
<


images                                                     *markdoc.nvim-images* ~
                                                   *markdoc.nvim-generic.images* ~

Type: `markdoc.config.generic.links`

Configuration for `image reference` section. Same as above.

toc                                                           *markdoc.nvim-toc* ~
                                                      *markdoc.nvim-generic.toc* ~

Type: `markdoc.config.generic.toc`

Configuration for `table of contents` section.

>lua
	---@class markdoc.config.generic.toc
	---
	---@field enabled? boolean
	---
	---@field heading? string
	---@field heading_level? integer
	---
	---@field entries generic.toc.entry[]
	
	
	---@class generic.toc.entry
	---
	---@field text string
	---@field tag string
<


MARKDOWN

Markdown options.

Images ~
1: https://github.com/OXY2DEV/markdoc.nvim/releases


vim:ft=vimdoc:textwidth=80:tabstop=4:noexpandtab:
